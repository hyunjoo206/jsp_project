package controller;

import java.io.BufferedReader;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import service.CommentService;
import service.CommentServiceImpl;

@WebServlet("/cmt/*")
public class CommentController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(CommentController.class);
	private int isOk;
	private CommentService csv;
	
	//컨트롤러랑 서비스 연결
    public CommentController() {
    	csv = new CommentServiceImpl();
    }
	
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		//contentType은 사용x
		
		//cmt/post/1 => 이런 식으로 가져올 거임. rest API방식
		//post만 가져오려면 아래와 같이 잘라주기
		
		//request 객체에 담아서 getRequestURI => uri를 받아옴
		String uri = request.getRequestURI();
		log.info(uri);
		
		String pathUri = uri.substring("/cmt/".length());
		String path = pathUri; //post만 남음
		String pathVar =""; //1만 남음
		if(pathUri.contains("/")) {
			path = pathUri.substring(0, pathUri.lastIndexOf("/")); // /cmt/post 뽑아냄
			pathVar = pathUri.substring(pathUri.lastIndexOf("/")+1);// 1만 뽑아냄
		}
		
		log.info(pathUri);
		log.info(path);
		log.info(pathVar);
		
		
		switch(path) {
		//js에서 보낸 데이터를 받기위해 StringBuffer 타입의 sb를 미리 선언
		//String은 변경불가인데 StringBuffer는 변경이나 추가 가능
		StringBuffer sb =new StringBuffer();
		
		//비어있는 String 타입 line 선언
		String line =""; 
		
		//request객체에서 getReader로 body부분을 읽어들여서 BufferedReader 타입의 br에 넣어줌
		//BufferedReader는 file 형태만 받는 타입
		BufferedReader br = request.getReader();
		
		//readLine으로 br(파일형태)을 한 줄씩 읽어들여서 line에 넣는데, 
		//읽어들일 값이 있으면 (null이 아니면) 
		while((line = br.readLine()) != null) {
			//sb(스트링버퍼형태)에 append를 이용해서 line 값을 추가
			sb.append(line);
		}
		
		//그럼 sb(스트링버퍼타입)에 line 한 줄 한 줄이 다 들어가있는 거임
		
		log.info(">>>sb:"+sb.toString());
		
		//JSONParser라는 형태의 parser를 선언
		//JSONParser 객체는 JSON 데이터를 파싱하는 java 클래스임
		//JSONParser에서 parse라는 메서드를 사용할 수 있음
		JSONParser parser = new JSONParser();
		//**************************************사실 잘 이해안감
		//JSONObject 형태의 jsonObj에
		//sb(StringBuffer형태)를 String형태로 바꿔서 parsing해서 JSONObject형태로 바꿔줌
		// JsonParser 객체를 사용하여 JSON 데이터를 파싱하면, 
		// Java에서 JSON 데이터를 쉽게 가공하거나 활용할 수 있어서 하는거 같음
		
		//parser.parse로 sb.toString해서 만든 고정된 String 내용을 한 줄씩 parse해서
		//jsonObj에 넣어주는 것. (객체로. JSON형태로)
		JSONObject jsonObj = (JSONObject)parser.parse(sb.toString());
		
		
		int bno = Integer.parseInt(jsonObj.get("bno").toString());
		String writer = jsonObj.get("writer").toString();
		
		}
		
		
		
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
